<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CCreative</name>
    </assembly>
    <members>
        <member name="M:CCreative.Math.Ceil``1(``0)">
            <summary>
            Calculates the closest int value that is greater than or equal to the value of the parameter
            </summary>
            <param name="number">number to round up</param>
            <returns>the result of the calculation</returns>
        </member>
        <member name="M:CCreative.Math.Constrain``1(``0,``0,``0)">
            <summary>
            Constrains a value to not exceed a minimum and maximum value
            </summary>
            <param name="value">the value to constrain</param>
            <param name="low">minimum limit</param>
            <param name="high">maximum limit</param>
            <returns>the constraint value</returns>
        </member>
        <member name="M:CCreative.Math.Dist(CCreative.PVector,CCreative.PVector)">
            <summary>
            Calculates the distance between two PVectors
            </summary>
            <param name="beginPoint">the first PVector</param>
            <param name="endPoint">the second PVector</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Dist(CCreative.PVector[])">
            <summary>
            Calculate the distance between the given points
            </summary>
            <param name="points">the points to calculate the distance with</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Dist``1(``0,``0,``0,``0)">
            <summary>
            Calculate the distance between the given points
            </summary>
            <param name="beginX">x-coordinate of the first point</param>
            <param name="beginY">y-coordinate of the first point</param>
            <param name="endX">x-coordinate of the second point</param>
            <param name="endY">y-coordinate of the second point</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Dist``1(``0,``0,``0,``0,``0,``0)">
            <summary>
            Calculate the distance between the given points
            </summary>
            <param name="beginX">x-coordinate of the first point</param>
            <param name="beginY">y-coordinate of the first point</param>
            <param name="beginZ">z-coordinate of the first point</param>
            <param name="endX">x-coordinate of the second point</param>
            <param name="endY">y-coordinate of the second point</param>
            <param name="endZ">z-coordinate of the second point</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Floor``1(``0)">
            <summary>
            Calculates the closest int value that is less than or equal to the value of the parameter
            </summary>
            <param name="number">number to round down</param>
            <returns>the result of the calculation</returns>
        </member>
        <member name="M:CCreative.Math.Lerp``1(``0,``0,``0)">
            <summary>
            Calculates a number between two numbers at a specific increment
            </summary>
            <param name="start">first value</param>
            <param name="stop">second value</param>
            <param name="atm">number between 0.0 and 1.0</param>
            <returns>the result of the calculation</returns>
        </member>
        <member name="M:CCreative.Math.Sqrt``1(``0)">
            <summary>
            Calculates the square root of the specified number
            </summary>
            <typeparam name="T">the type of the floating point number</typeparam>
            <param name="number">the specified number</param>
            <returns>the square root of <paramref name="number"/></returns>
        </member>
        <member name="M:CCreative.Math.Pow``1(``0,``0)">
            <summary>
            Calculates the power of <paramref name="x"/> raised to <paramref name="y"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.Mag``1(``0,``0)">
            <summary>
            Calculates the magnitude (or length) of a vector
            </summary>
            <param name="numberX">x-axis of the vector</param>
            <param name="numberY">y-axis of the vector</param>
            <returns>the magnitude (or length) of the vector</returns>
        </member>
        <member name="M:CCreative.Math.Map``1(``0,``0,``0,``0,``0)">
            <summary>
            Re-maps a number from one range to another
            </summary>
            <param name="value">the incoming value to be converted</param>
            <param name="start1">lower bound of the value's current range</param>
            <param name="stop1">upper bound of the value's current range</param>
            <param name="start2">lower bound of the value's target range</param>
            <param name="stop2">upper bound of the value's target range</param>
            <returns>the remapped number</returns>
        </member>
        <member name="M:CCreative.Math.Norm``1(``0,``0,``0)">
            <summary>
            Normalizes a number from another range into a value between 0 and 1
            </summary>
            <param name="value">the incoming value to be converted</param>
            <param name="start">lower bound of the value's current range</param>
            <param name="stop">upper bound of the value's current range</param>
            <returns>the normalized value</returns>
        </member>
        <member name="M:CCreative.Math.Round``1(``0)">
            <summary>
            Calculates the integer closest to the given number
            </summary>
            <param name="number">number to round</param>
            <returns>returns the rounded number</returns>
        </member>
        <member name="M:CCreative.Math.Sq``1(``0)">
            <summary>
            Squares a number (multiplies a number by itself)
            </summary>
            <param name="number">number to square</param>
            <returns>returns the squared number</returns>
        </member>
        <member name="M:CCreative.Math.InverseSqrt``1(``0)">
            <summary>
            Calculates 1 / sqrt(x) of the given number
            </summary>
            <param name="x">the number to calculate the inverse square root of</param>
            <returns>1 / sqrt(x)</returns>
        </member>
        <member name="M:CCreative.Math.Noise(System.Double)">
            <summary>
            Returns the Perlin noise value at specified coordinates
            </summary>
            <remarks>
            Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard <see cref="M:CCreative.Math.Random(System.Double,System.Double)"/> function
            </remarks>
            <param name="x">x-coordinate in noise space</param>
            <returns>the Perlin noise value at the specified coordinates</returns>
        </member>
        <member name="M:CCreative.Math.Noise(System.Double,System.Double)">
            <summary>
            Returns the Perlin noise value at specified coordinates
            </summary>
            <remarks>
            Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard <see cref="M:CCreative.Math.Random(System.Double,System.Double)"/> function
            </remarks>
            <param name="x">x-coordinate in noise space</param>
            <param name="y">y-coordinate in noise space</param>
            <returns>the Perlin noise value at the specified coordinates</returns>
        </member>
        <member name="M:CCreative.Math.Noise(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Perlin noise value at specified coordinates
            </summary>
            <remarks>
            Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard <see cref="M:CCreative.Math.Random(System.Double,System.Double)"/> function
            </remarks>
            <param name="x">x-coordinate in noise space</param>
            <param name="y">y-coordinate in noise space</param>
            <param name="z">z-coordinate in noise space</param>
            <returns>the Perlin noise value at the specified coordinates</returns>
        </member>
        <member name="M:CCreative.Math.NoiseSeed(System.Int32)">
            <summary>
            Sets the seed value for <see cref="M:CCreative.Math.Noise(System.Double)"/>, <see cref="M:CCreative.Math.Noise(System.Double,System.Double)"/> and <see cref="M:CCreative.Math.Noise(System.Double,System.Double,System.Double)"/>
            </summary>
            <remarks>
            By default, noise() produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run
            </remarks>
            <param name="Seed">seed value</param>
        </member>
        <member name="M:CCreative.Math.NoiseDetail(System.Int32)">
             <summary>
             Adjusts the character and level of detail produced by the Perlin noise function
             </summary>
             <remarks>
             Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overall intensity of the noise, whereas higher octaves create finer-grained details in the noise sequence.
            
             By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the first octave.This falloff amount can be changed by adding an additional function parameter.For example, a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave.While any number between 0.0 and 1.0 is valid, note that values greater than 0.5 may result in noise() returning values greater than 1.0
             </remarks>
             <param name="lod">number of octaves to be used by the noise</param>
        </member>
        <member name="M:CCreative.Math.NoiseDetail(System.Int32,System.Double)">
             <summary>
             Adjusts the character and level of detail produced by the Perlin noise function
             </summary>
             <remarks>
             Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overall intensity of the noise, whereas higher octaves create finer-grained details in the noise sequence.
            
             By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the first octave.This falloff amount can be changed by adding an additional function parameter.For example, a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave.While any number between 0.0 and 1.0 is valid, note that values greater than 0.5 may result in noise() returning values greater than 1.0
             </remarks>
             <param name="lod">number of octaves to be used by the noise</param>
             <param name="fallof">falloff factor for each octave</param>
        </member>
        <member name="M:CCreative.Math.Degrees``1(``0)">
            <summary> Converts degrees to radiands. </summary>
            <param name="radians"> The radians to convert. </param>
            <returns>degrees</returns>
        </member>
        <member name="M:CCreative.Math.Radians``1(``0)">
            <summary>
            Converts radiands to degrees
            </summary>
            <param name="degrees">the radiands</param>
            <returns>radians</returns>
        </member>
        <member name="M:CCreative.Math.RandomString(System.Int32)">
            <summary>
            Returns a random string with a given lenght</summary>
            <param name="length">the length</param>
            <returns>a random string</returns>
        </member>
        <member name="M:CCreative.Math.Random(System.Double,System.Double)">
            <summary>
            Return a random double floating point number between the given range
            </summary>
            <param name="low">the lower bound (inclusive)</param>
            <param name="high">the upper bound (exclusive)</param>
            <returns>a random number</returns>
        </member>
        <member name="M:CCreative.Math.Random(System.Double)">
            <summary>
            Return a random double floating point number
            </summary>
            <param name="high">the upper bound (exclusive)</param>
            <returns>a random number</returns>
        </member>
        <member name="M:CCreative.Math.Random">
            <summary>
            Return a random double floating point number between 0 and 1
            </summary>
            <returns>a random double-point number between 0 and 1</returns>
        </member>
        <member name="M:CCreative.Math.RandomSeed(System.Int32)">
            <summary>
            Sets the seed value for random()
            </summary>
            <remarks>
            By default, random() produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run
            </remarks>
            <param name="seed"></param>
        </member>
        <member name="M:CCreative.Math.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random item from the list
            </summary>
            <param name="list">the array to pick a random item from</param>
            <returns>a rando item from the list</returns>
        </member>
        <member name="M:CCreative.Math.Random``1(System.Collections.Generic.IList{``0})">
            <summary> Returns a random item form the array. </summary>
            <param name="array"> The array to fick a random item from.</param>
            
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.RandomInt(System.Int32,System.Int32)">
            <summary> Return a random int number. </summary>
            <param name="lowerBound"> The lower bound (inclusive). </param>
            <param name="upperBound"> The upper bound (exclusive). </param>
            
            <returns> A random int between the given range. </returns>
        </member>
        <member name="M:CCreative.Math.RandomInt(System.Int32)">
            <summary> Return a random int number. </summary>
            <param name="upperBound">  the upper bound (exclusive). </param>
            
            <returns> System.Single. </returns>
        </member>
        <member name="M:CCreative.Math.RandomInt">
            <summary> Return a random int number between 0, and int.MaxValue. </summary>
            
            <returns> System.Single. </returns>
        </member>
        <member name="M:CCreative.Math.RandomByte">
            <summary> Return a random byte number. </summary>
            
            <returns> System.Single. </returns>
        </member>
        <member name="M:CCreative.Math.RandomBytes(System.Byte[])">
            <summary>
            Fills the provided byte array with random bytes.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:CCreative.Math.RandomGaussian(System.Double,System.Double)">
            <summary> Returns a random number fitting a Gaussian, or normal, distribution. There is theoretically no minimum or maximum value that randomGaussian() might return.  </summary>
            <param name="mean"> The mean. </param>
            <param name="sd"> The standard deviation. </param>
            
            <returns> A double. </returns>
        </member>
        <member name="M:CCreative.Math.RandomGaussian">
            <summary> Returns a random number fitting a Gaussian, or normal, distribution. There is theoretically no minimum or maximum value that randomGaussian() might return. </summary>
            <returns> A Gaussian of mean 0 and deviation of 1. </returns>
        </member>
        <member name="M:CCreative.Math.RandomBoolean">
            <summary> Returns a true or false the chance is 50-50. </summary>
            
            <returns> The result. </returns>
        </member>
        <member name="M:CCreative.Math.RandomColor">
            <summary>
            Returns a random color with the alpha channel set to <see cref="F:System.Byte.MaxValue"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.RandomLong(System.Int64,System.Int64)">
            <summary>
            Calculate a random long between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="min">the minimum value of the bounds</param>
            <param name="max"> the maximum value of the bounds</param>
            <returns>a random long between <paramref name="min"/> and <paramref name="max"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomLong(System.Int64)">
            <summary>
            Calculate a random long between 0 and <paramref name="max"/>
            </summary>
            <param name="max"> the maximum value of the bounds</param>
            <returns>a random long between 0 and <paramref name="max"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomLong">
            <summary>
            Calculate a random long between <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>
            </summary>
            <returns>a random long between <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomDecimal(System.Decimal,System.Decimal)">
            <summary>
            Calculate a random decimal between <paramref name="minValue"/> and <paramref name="maxValue"/>
            </summary>
            <param name="minValue">the minimum value of the bounds</param>
            <param name="maxValue">the maximum value of the bounds</param>
            <returns>a random decimal between <paramref name="minValue"/> and <paramref name="maxValue"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomDecimal(System.Decimal)">
            <summary>
            Calculate a random decimal between <see cref="F:System.Decimal.Zero"/> and <paramref name="maxValue"/>		
            </summary>
            <param name="maxValue">the maximum value of the bounds</param>
            <returns>a random decimal between <see cref="F:System.Decimal.Zero"/> and <paramref name="maxValue"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomDecimal">
            <summary>
            Calculate a random decimal between <see cref="F:System.Decimal.Zero"/> and <see cref="F:System.Decimal.One"/>
            </summary>
            <returns>a random decimal between <see cref="F:System.Decimal.Zero"/> and <see cref="F:System.Decimal.One"/> </returns>
        </member>
        <member name="M:CCreative.Math.Sign``1(``0)">
            <summary> returns the sign of a number, indicating whether the number is positive, negative or zero </summary>
            <param name="number"> The number to check. </param>
            <returns> -1 if lower than 0, 0 if equal to 0 and 1 if higher that 0. </returns>
        </member>
        <member name="M:CCreative.Math.Fibonacci``1(``0)">
            <summary> Returns the fibonacci of the givn number. </summary>
            <param name="number"> The number. </param>
            <returns> A double. </returns>
        </member>
        <member name="M:CCreative.Math.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the given list and returns a copy which can be iterated over
            </summary>
            <param name="list">the items ot shuffle</param>
            <returns>a shuffled copy of the list</returns>
        </member>
        <member name="M:CCreative.Math.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Search for a value in a sorted list;
            </summary>
            <param name="values">the sorted list to search though</param>
            <param name="value">the value to search for</param>
            <returns>the index of <paramref name="value"/></returns>
        </member>
        <member name="M:CCreative.Math.Binary(System.Int64)">
            <summary> Converts an int, byte, or a long to a String containing the equivalent binary notation </summary>
            <param name="value"> Value to convert </param>
            <returns> Returns the binary string </returns>
        </member>
        <member name="M:CCreative.Math.Binary(System.Char)">
            <summary> Converts an char to a String containing the equivalent binary notation </summary>
            <param name="value"> Value to convert </param>
            <returns> Returns the binary string </returns>
        </member>
        <member name="M:CCreative.Math.Binary(CCreative.Color)">
            <summary> Converts an char to a String containing the equivalent binary notation </summary>
            <param name="value"> Value to convert </param>
            <returns> Returns the binary string </returns>
        </member>
        <member name="M:CCreative.Math.Unbinary(System.String)">
            <summary> Converts a String representation of a binary number to its equivalent integer value </summary>
            <param name="value"> String to convert to an integer </param>
            <returns> Returns the result of the conversion </returns>
        </member>
        <member name="M:CCreative.Math.Hex``1(``0)">
            <summary> Converts an int or a byte to a String containing the equivalent hexadecimal notation </summary>
            <param name="value"> The value to convert to a hex value </param>
            <returns> Returns the hex value </returns>
        </member>
        <member name="M:CCreative.Math.Hex(System.Char)">
            <summary> Converts an char to a String containing the equivalent hexadecimal notation </summary>
            <param name="value"> The value to convert to a hex value </param>
            <returns> Returns the hex value </returns>
        </member>
        <member name="M:CCreative.Math.Hex(CCreative.Color)">
            <summary> Converts an int or a byte to a String containing the equivalent hexadecimal notation </summary>
            <param name="value"> The value to convert to a hex value </param>
            <returns> Returns the hex value </returns>
        </member>
        <member name="M:CCreative.Math.Unhex(System.String)">
            <summary> Converts a String representation of a hexadecimal number to its equivalent integer value </summary>
            <param name="value"> String to convert to an integer </param>
            <returns> Returns a interger from a hexadecimal number </returns>
        </member>
        <member name="M:CCreative.Math.Str``1(``0)">
            <summary>
            Converts the given value to a string, returns <see cref="F:System.String.Empty"/> if the value is null
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Int``1(``0)">
            <summary>
            Converts a value to a <see cref="T:System.Int32"/>
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Char``1(``0)">
            <summary>
            Converts a value to a <see cref="T:System.Char"/>
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Boolean``1(``0)">
            <summary>
            Converts a value to a <see cref="T:System.Boolean"/>
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Double``1(``0)">
            <summary>
            Converts the given value to a double
            </summary>
            <param name="value">the value to convert to a double</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Convert``2(``1)">
            <summary> Converts a value to a different type </summary>
            <param name="value"> The value to convert </param>
            
            <returns> Returns the converted value </returns>
        </member>
        <member name="M:CCreative.Math.FastRandom.#ctor">
            <summary>
            Initialises a new instance using time dependent seed.
            </summary>
        </member>
        <member name="M:CCreative.Math.FastRandom.#ctor(System.Int32)">
            <summary>
            Initialises a new instance using an int value as seed.
            This constructor signature is provided to maintain compatibility with
            System.Random
            </summary>
        </member>
        <member name="M:CCreative.Math.FastRandom.Reinitialise(System.Int32)">
            <summary>
            Reinitialises using an int value as a seed.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:CCreative.Math.FastRandom.Next">
            <summary>
            Generates a random int over the range 0 to int.MaxValue-1.
            MaxValue is not generated in order to remain functionally equivalent to System.Random.Next().
            This does slightly eat into some of the performance gain over System.Random, but not much.
            For better performance see:
            
            Call NextInt() for an int over the range 0 to int.MaxValue.
            
            Call NextUInt() and cast the result to an int to generate an int over the full Int32 value range
            including negative values. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.FastRandom.Next(System.Int32)">
            <summary>
            Generates a random int over the range 0 to upperBound-1, and not including upperBound.
            </summary>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.FastRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random int over the range lowerBound to upperBound-1, and not including upperBound.
            upperBound must be >= lowerBound. lowerBound may be negative.
            </summary>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.FastRandom.NextDouble">
            <summary>
            Generates a random double. Values returned are from 0.0 up to but not including 1.0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.FastRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the provided byte array with random bytes.
            This method is functionally equivalent to System.Random.NextBytes(). 
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:CCreative.Math.FastRandom.NextBytesUnsafe(System.Span{System.Byte})">
            <summary>
            A version of NextBytes that uses a pointer to set 4 bytes of the byte buffer in one operation
            thus providing a nice speedup. The loop is also partially unrolled to allow out-of-order-execution,
            this results in about a x2 speedup on an AMD Athlon. Thus performance may vary wildly on different CPUs
            depending on the number of execution units available.
            
            Another significant speedup is obtained by setting the 4 bytes by indexing pDWord (e.g. pDWord[i++]=w)
            instead of adjusting it dereferencing it (e.g. *pDWord++=w).
            
            Note that this routine requires the unsafe compilation flag to be specified and so is commented out by default.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:CCreative.Math.FastRandom.NextUInt">
            <summary>
            Generates a uint. Values returned are over the full range of a uint, 
            uint.MinValue to uint.MaxValue, inclusive.
            
            This is the fastest method for generating a single random number because the underlying
            random number generator algorithm generates 32 random bits that can be cast directly to 
            a uint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.FastRandom.NextInt">
            <summary>
            Generates a random int over the range 0 to int.MaxValue, inclusive. 
            This method differs from Next() only in that the range is 0 to int.MaxValue
            and not 0 to int.MaxValue-1.
            
            The slight difference in range means this method is slightly faster than Next()
            but is not functionally equivalent to System.Random.Next().
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.FastRandom.NextBool">
            <summary>
            Generates a single random bit.
            This method's performance is improved by generating 32 bits in one operation and storing them
            ready for future calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.Max(System.SByte[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.Byte[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.Int16[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.UInt16[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.Int32[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.UInt32[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.Int64[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.UInt64[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.Single[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.Double[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Max(System.Decimal[])">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.SByte[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.Byte[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.Int16[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.UInt16[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.Int32[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.UInt32[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.Int64[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.UInt64[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.Single[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.Double[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Min(System.Decimal[])">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Sum(System.Double[])">
            <summary>
            Determines the sum of a sequence of numbers
            </summary>
            <param name="numbers">array of get the sum of</param>
            <returns>returns the sum</returns>
        </member>
        <member name="E:CCreative.Windowing.GameWindow.Load">
            <inheritdoc/>
        </member>
        <member name="E:CCreative.Windowing.GameWindow.Unload">
            <inheritdoc/>
        </member>
        <member name="E:CCreative.Windowing.GameWindow.UpdateFrame">
            <inheritdoc/>
        </member>
        <member name="E:CCreative.Windowing.GameWindow.RenderThreadStarted">
            <inheritdoc/>
        </member>
        <member name="E:CCreative.Windowing.GameWindow.RenderFrame">
            <inheritdoc/>
        </member>
        <member name="F:CCreative.Windowing.GameWindow.MaxFrequency">
            <summary>
            Frequency cap for Update/RenderFrame events.
            </summary>
        </member>
        <member name="P:CCreative.Windowing.GameWindow.IsRunningSlowly">
            <summary>
            Gets a value indicating whether or not UpdatePeriod has consistently failed to reach TargetUpdatePeriod.
            This can be used to do things such as decreasing visual quality if the user's computer isn't powerful enough
            to handle the application.
            </summary>
        </member>
        <member name="P:CCreative.Windowing.GameWindow.IsMultiThreaded">
            <inheritdoc/>
        </member>
        <member name="P:CCreative.Windowing.GameWindow.RenderFrequency">
            <inheritdoc />
        </member>
        <member name="P:CCreative.Windowing.GameWindow.RenderTime">
            <inheritdoc />
        </member>
        <member name="P:CCreative.Windowing.GameWindow.VSync">
            <inheritdoc />
        </member>
        <member name="M:CCreative.Windowing.GameWindow.#ctor(OpenTK.Windowing.Desktop.GameWindowSettings,OpenTK.Windowing.Desktop.NativeWindowSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:CCreative.Windowing.GameWindow"/> class with sensible default attributes.
            </summary>
            <param name="gameWindowSettings">The <see cref="T:CCreative.Windowing.GameWindow"/> related settings.</param>
            <param name="nativeWindowSettings">The <see cref="T:OpenTK.Windowing.Desktop.NativeWindow"/> related settings.</param>
            <remarks>
            <para>
            Use GameWindowSettings.Default and NativeWindowSettings.Default to get some sensible default attributes.
            </para>
            </remarks>
        </member>
        <member name="M:CCreative.Windowing.GameWindow.Run">
            <inheritdoc />
        </member>
        <member name="M:CCreative.Windowing.GameWindow.SwapBuffers">
            <inheritdoc />
        </member>
        <member name="M:CCreative.Windowing.GameWindow.Close">
            <inheritdoc />
        </member>
        <member name="M:CCreative.Windowing.GameWindow.OnRenderThreadStarted">
            <summary>
            Run when the update thread is started. This will never run if you set IsSingleThreaded to true.
            </summary>
        </member>
        <member name="M:CCreative.Windowing.GameWindow.OnLoad">
            <summary>
            Run immediately after Run() is called.
            </summary>
        </member>
        <member name="M:CCreative.Windowing.GameWindow.OnUnload">
            <summary>
            Run when the window is about to close.
            </summary>
        </member>
        <member name="M:CCreative.Windowing.GameWindow.OnUpdateFrame(OpenTK.Windowing.Common.FrameEventArgs)">
            <summary>
            Run when the window is ready to update.
            </summary>
            <param name="args">The event arguments for this frame.</param>
        </member>
        <member name="M:CCreative.Windowing.GameWindow.OnRenderFrame(System.Double)">
            <summary>
            Run when the window is ready to update.
            </summary>
            <param name="args">The event arguments for this frame.</param>
        </member>
        <member name="P:CCreative.PConstants.MouseX">
            <summary>
            The horizontal location of the mouse on the window
            </summary>
        </member>
        <member name="P:CCreative.PConstants.MouseY">
            <summary>
            The vertical location of the mouse on the window
            </summary>
        </member>
        <member name="P:CCreative.PConstants.MousePos">
            <summary>
            The current location of the mouse on the window
            </summary>
        </member>
        <member name="P:CCreative.PConstants.PmouseX">
            <summary>
            The vertical location of the mouse on the window on the previous frame
            </summary>
        </member>
        <member name="P:CCreative.PConstants.PmouseY">
            <summary>
            The horizontal location of the mouse on the window on the previous frame
            </summary>
        </member>
        <member name="F:CCreative.PImage.modified">
            modified portion of the image 
        </member>
        <member name="F:CCreative.PImage.loaded">
            Loaded pixels flag 
        </member>
        <member name="M:CCreative.PImage.GetImpl(System.Int32,System.Int32,System.Int32,System.Int32,CCreative.PImage,System.Int32,System.Int32)">
            Internal function to actually handle getting a block of pixels that
            has already been properly cropped to a valid region. That is, x/y/w/h
            are guaranteed to be inside the image space, so the implementation can
            use the fastest possible pixel copying method.
        </member>
        <member name="M:CCreative.PImage.SetImpl(CCreative.PImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            Internal function to actually handle setting a block of pixels that
            has already been properly cropped from the image to a valid region.
        </member>
        <member name="M:CCreative.PImage.Blend_Blend(CCreative.Color,CCreative.Color)">
            Blend
            O = S
        </member>
        <member name="M:CCreative.PImage.Blend_Add_Pin(CCreative.Color,CCreative.Color)">
            Add
            O = MIN(D + S, 1)
        </member>
        <member name="M:CCreative.PImage.Blend_Lightest(CCreative.Color,CCreative.Color)">
            Lightest
            O = MAX(D, S)
        </member>
        <member name="M:CCreative.PImage.Blend_Darkest(CCreative.Color,CCreative.Color)">
            Darkest
            O = MIN(D, S)
        </member>
        <member name="M:CCreative.PImage.Blend_Difference(CCreative.Color,CCreative.Color)">
            Difference
            O = ABS(D - S)
        </member>
        <member name="M:CCreative.PImage.Blend_Exclusion(CCreative.Color,CCreative.Color)">
            Exclusion
            O = (1 - S)D + S(1 - D)
            O = D + S - 2DS
        </member>
        <member name="M:CCreative.PImage.Blend_Screen(CCreative.Color,CCreative.Color)">
            Screen
            O = 1 - (1 - D)(1 - S)
            O = D + S - DS
        </member>
        <!-- Badly formed XML comment ignored for member "M:CCreative.PImage.Blend_Overlay(CCreative.Color,CCreative.Color)" -->
        <!-- Badly formed XML comment ignored for member "M:CCreative.PImage.Blend_Hard_Light(CCreative.Color,CCreative.Color)" -->
        <member name="M:CCreative.PImage.blend_soft_light(CCreative.Color,CCreative.Color)">
            Soft Light (peg top)
            O = (1 - D) * MULTIPLY(D, S) + D * SCREEN(D, S)
            O = (1 - D) * DS + D * (1 - (1 - D)(1 - S))
            O = 2DS + DD - 2DDS
        </member>
        <member name="M:CCreative.PImage.Blend_Dodge(CCreative.Color,CCreative.Color)">
            Dodge
            O = D / (1 - S)
        </member>
        <member name="M:CCreative.PImage.blend_burn(CCreative.Color,CCreative.Color)">
            Burn
            O = 1 - (1 - A) / B
        </member>
        <member name="T:CCreative.Rendering.PGraphics">
            <summary>
            Main graphics and rendering context
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(CCreative.Color)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <remarks>
            The default background is light gray. This function is typically used within draw() to clear the display window at the beginning of each frame, but it can be used inside setup() to set the background on the first frame of animation or if the backgound need only be set once.
            </remarks>
            <param name="color">the background color</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(CCreative.PImage)">
            <summary>
            Sets the background of the window to a image and erases all drawings on the screen
            </summary>
            <param name="image">PImage to set as background</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Double)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Double,System.Double)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <param name="alpha">the opacity of the background</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Double,System.Double,System.Double)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="v1">the red or hue value of the background</param>
            <param name="v2">the green of saturation value of the background</param>
            <param name="v3">the red or brightness value of the background</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="v1">the red or hue value of the background</param>
            <param name="v2">the green of saturation value of the background</param>
            <param name="v3">the red or brightness value of the background</param>
            <param name="alpha">the opacity of the background</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Double)">
            <summary>
            Changes the way CCreative interprets color data
            </summary>
            <param name="mode">Either <see cref="F:CCreative.PConstants.RGB"/> or <see cref="F:CCreative.PConstants.RGB"/>, corresponding to Red/Green/Blue and Hue/Saturation/Brightness</param>
            <param name="max">range for all color elements</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Double,System.Double,System.Double)">
            <summary>
            Changes the way CCreative interprets color data
            </summary>
            <param name="mode">Either <see cref="F:CCreative.PConstants.RGB"/> or <see cref="F:CCreative.PConstants.RGB"/>, corresponding to Red/Green/Blue and Hue/Saturation/Brightness</param>
            <param name="max1">range for the red or hue depending on the current color mode</param>
            <param name="max2">range for the green or saturation depending on the current color mode</param>
            <param name="max3">range for the blue or brightness depending on the current color mode</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Changes the way CCreative interprets color data
            </summary>
            <param name="mode">Either <see cref="F:CCreative.PConstants.RGB"/> or <see cref="F:CCreative.PConstants.RGB"/>, corresponding to Red/Green/Blue and Hue/Saturation/Brightness</param>
            <param name="max1">range for the red or hue depending on the current color mode</param>
            <param name="max2">range for the green or saturation depending on the current color mode</param>
            <param name="max3">range for the blue or brightness depending on the current color mode</param>
            <param name="maxA">range for the alpha</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Double)">
            <summary>
            Creates a grayscale color
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <returns>the created color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(CCreative.Color,System.Double)">
            <summary>
            Creates a new color based on <paramref name="color"/> with a given transparency
            </summary>
            <param name="color">the base color to change the alpha value of</param>
            <param name="alpha">the opacity of the color</param>
            <returns>a new color based from <paramref name="color"/> with the given alpha</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Double,System.Double)">
            <summary>
            Creates a grayscale color with a given transparency
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <param name="alpha">the opacity of the color</param>
            <returns>a new grayscale color with the given alpha</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Double,System.Double,System.Double)">
            <summary>
            Creates a color from RGB values or HSB value based on the given colormode, use <see cref="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Double)"/> to change the colormode
            </summary>
            <param name="v1">the red or hue value of the color</param>
            <param name="v2">the green of saturation value of the color</param>
            <param name="v3">the red or brightness value of the color</param>
            <returns>the created color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a color from RGB values or HSB value based on the given colormode, use <see cref="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Double)"/> to change the colormode
            </summary>
            <param name="v1">the red or hue value of the color</param>
            <param name="v2">the green of saturation value of the color</param>
            <param name="v3">the red or brightness value of the color</param>
            <param name="a">the opacity of the color</param>
            <returns>the created color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Alpha(CCreative.Color)">
            <summary>
            Returns the alpha (transparency) value of the color
            </summary>
            <param name="color">the color to get the alpha (transparency) value of</param>
            <returns>the opacity value of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Red(CCreative.Color)">
            <summary>
            Returns the red component of the color
            </summary>
            <param name="color">the color to get the red component of</param>
            <returns>the red component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Green(CCreative.Color)">
            <summary>
            Returns the green component of the color
            </summary>
            <param name="color">the color to get the green component of</param>
            <returns>the green component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Blue(CCreative.Color)">
            <summary>
            Returns the blue value of the color
            </summary>
            <param name="color">the color to get the blue value of</param>
            <returns>the blue value of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Hue(CCreative.Color)">
            <summary>
            Returns the hue component of the color
            </summary>
            <param name="color">the color to get the hue component of</param>
            <returns>the hue component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Saturation(CCreative.Color)">
            <summary>
            Returns the saturation component of the color
            </summary>
            <param name="color">the color to get the saturation component of</param>
            <returns>the saturation component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Brightness(CCreative.Color)">
            <summary>
            Returns the brightness component of the color
            </summary>
            <param name="color">the color to get the brightness component of</param>
            <returns>the brightness component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ContrastColor(CCreative.Color)">
            <summary>
            Gets the contrast color (black or white) of the given color
            </summary>
            <param name="color">the color to calculate the contrast color of</param>
            <returns>the contrast color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.LerpColor(CCreative.Color,CCreative.Color,System.Double)">
            <summary>
            Calculates a color between two colors at a specific increment
            </summary>
            <param name="c1">the first color</param>
            <param name="c2">the second color</param>
            <param name="amt">the specified increment between 0 and 1</param>
            <returns>the interpolated color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.NoStroke">
            <summary>
            Disables drawing the stroke (outline)
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(CCreative.Color)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="color">the color to use</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Double)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Double,System.Double)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <param name="alpha">the alpha (transparent) component of the new stroke color</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Double,System.Double,System.Double)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="v1">the red or hue value of the new stroke color</param>
            <param name="v2">the green of saturation value of the new stroke color</param>
            <param name="v3">the red or brightness value of the new stroke color</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="v1">the red or hue value of the new stroke color</param>
            <param name="v2">the green of saturation value of the new stroke color</param>
            <param name="v3">the red or brightness value of the new color</param>
            <param name="alpha">the alpha (transparency) of the new stroke color</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.NoFill">
            <summary>
            Disables filling geometry
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(CCreative.Color)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="color">the new stroke </param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Double)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Double,System.Double)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <param name="alpha">the opacity of the color</param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Double,System.Double,System.Double)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="v1">the red or hue value of the fill color</param>
            <param name="v2">the green of saturation value of the fill color</param>
            <param name="v3">the red or brightness value of the fill color</param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="v1">the red or hue value of the fill color</param>
            <param name="v2">the green of saturation value of the fill color</param>
            <param name="v3">the red or brightness value of the fill color</param>
            <param name="alpha">the opacity of the fill color</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.NoTint">
            <summary>
            Removes the current fill value for displaying images and reverts to displaying images with their original hues
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(CCreative.Color)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="color">the new tint color</param>
            <returns>the new tint color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Double)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <returns>the new tint color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Double,System.Double)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <param name="alpha">the opacity of the images</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Double,System.Double,System.Double)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="v1">the red or hue value of the tint color</param>
            <param name="v2">the green of saturation value of the tint color</param>
            <param name="v3">the red or brightness value of the tint color</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="v1">the red or hue value of the tint color</param>
            <param name="v2">the green of saturation value of the tint color</param>
            <param name="v3">the red or brightness value of the tint color</param>
            <param name="alpha">the opacity of the images</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Ambient(CCreative.Color)">
            <summary>
            Sets the ambient reflectance for shapes drawn to the screen
            </summary>
            <param name="color">the reflectance color</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Ambient(System.Double)">
            <summary>
            Sets the ambient reflectance for shapes drawn to the screen
            </summary>
            <param name="gray">number specifying value between white and black</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Ambient(System.Double,System.Double,System.Double)">
            <summary>
            Sets the ambient reflectance for shapes drawn to the screen
            </summary>
            <param name="v1">the red or hue value of the ambient reflectance color</param>
            <param name="v2">the green of saturation value of the ambient reflectance color</param>
            <param name="v3">the red or brightness value of the ambient reflectance color</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.AmbientLight(CCreative.Color)">
            <summary>
            Adds an ambient light
            </summary>
            <param name="color">the color of the ambient light</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.AmbientLight(System.Double,System.Double,System.Double)">
            <summary>
            Adds an ambient light
            </summary>
            <remarks>
            Ambient light doesn't come from a specific direction, the rays of light have bounced around so much that objects are evenly lit from all sides
            </remarks>
            <param name="v1">the red or hue value of the ambient color</param>
            <param name="v2">the green of saturation value of the ambient color</param>
            <param name="v3">the red or brightness value of the ambient color</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Multiplies the current matrix by the one specified through the parameters
            </summary>
            <param name="n00">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n01">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n02">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n10">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n11">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n12">numbers which define the 4x4 matrix to be multiplied</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Multiplies the current matrix by the one specified through the parameters
            </summary>
            <param name="n00">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n01">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n02">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n03">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n10">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n11">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n12">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n13">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n20">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n21">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n22">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n23">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n30">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n31">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n32">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n33">numbers which define the 4x4 matrix to be multiplied</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(CCreative.PMatrix)">
            <summary>
            Multiplies the current matrix by the one specified through the parameter
            </summary>
            <param name="matrix">the matrix to multiply the current with</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(CCreative.PMatrix2D)">
            <summary>
            Multiplies the current matrix by the one specified through the parameter
            </summary>
            <param name="matrix">the matrix to multiply the current with</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(CCreative.PMatrix3D)">
            <summary>
            Multiplies the current matrix by the one specified through the parameter
            </summary>
            <param name="matrix">the matrix to multiply the current with</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Arc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an arc to the screen
            </summary>
            <param name="a">x-coordinate of the arc's ellipse</param>
            <param name="b">y-coordinate of the arc's ellipse</param>
            <param name="c">width of the arc's ellipse by default</param>
            <param name="d">height of the arc's ellipse by default</param>
            <param name="start">angle to start the arc, specified in radians</param>
            <param name="stop">angle to stop the arc, specified in radians</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.BeginCamera">
            <summary>
            The beginCamera() and endCamera() functions enable advanced customization of the camera space
            </summary>
        </member>
        <member name="F:CCreative.PGraphicsOpenGL.Pixels">
            <summary>
            Array containing the values for all the pixels in the display window
            </summary>
        </member>
        <member name="M:CCreative.PGraphicsOpenGL.Background(CCreative.Color)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <remarks>
            The default background is light gray. This function is typically used within draw() to clear the display window at the beginning of each frame, but it can be used inside setup() to set the background on the first frame of animation or if the backgound need only be set once.
            </remarks>
            <param name="color">the background color</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.PShader.Set(System.String,System.Int32)">
            <summary>
            Set a uniform int on this shader.
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
        </member>
        <member name="M:CCreative.PShader.Set(System.String,System.Single)">
            <summary>
            Set a uniform float on this shader.
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
        </member>
        <member name="M:CCreative.PShader.SetMatrix4(System.String,OpenTK.Mathematics.Matrix4)">
            <summary>
            Set a uniform Matrix4 on this shader
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
            <remarks>
              <para>
              The matrix is transposed before being sent to the shader.
              </para>
            </remarks>
        </member>
        <member name="M:FastNoiseLite.#ctor(System.Int32)">
            <summary>
            Create new FastNoise object with optional seed
            </summary>
        </member>
        <member name="M:FastNoiseLite.SetSeed(System.Int32)">
            <summary>
            Sets seed used for all noise types
            </summary>
            <remarks>
            Default: 1337
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFrequency(System.Double)">
            <summary>
            Sets frequency for all noise types
            </summary>
            <remarks>
            Default: 0.01
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetNoiseType(FastNoiseLite.NoiseType)">
            <summary>
            Sets noise algorithm used for GetNoise(...)
            </summary>
            <remarks>
            Default: OpenSimplex2
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetRotationType3D(FastNoiseLite.RotationType3D)">
            <summary>
            Sets domain rotation type for 3D Noise and 3D DomainWarp.
            Can aid in reducing directional artifacts when sampling a 2D plane in 3D
            </summary>
            <remarks>
            Default: None
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalType(FastNoiseLite.FractalType)">
            <summary>
            Sets method for combining octaves in all fractal noise types
            </summary>
            <remarks>
            Default: None
            Note: FractalType.DomainWarp... only affects DomainWarp(...)
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalOctaves(System.Int32)">
            <summary>
            Sets octave count for all fractal noise types 
            </summary>
            <remarks>
            Default: 3
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalLacunarity(System.Double)">
            <summary>
            Sets octave lacunarity for all fractal noise types
            </summary>
            <remarks>
            Default: 2.0
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalGain(System.Double)">
            <summary>
            Sets octave gain for all fractal noise types
            </summary>
            <remarks>
            Default: 0.5
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalWeightedStrength(System.Double)">
            <summary>
            Sets octave weighting for all none DomainWarp fratal types
            </summary>
            <remarks>
            Default: 0.0
            Note: Keep between 0...1 to maintain -1...1 output bounding
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetFractalPingPongStrength(System.Double)">
            <summary>
            Sets strength of the fractal ping pong effect
            </summary>
            <remarks>
            Default: 2.0
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetCellularDistanceFunction(FastNoiseLite.CellularDistanceFunction)">
            <summary>
            Sets distance function used in cellular noise calculations
            </summary>
            <remarks>
            Default: Distance
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetCellularReturnType(FastNoiseLite.CellularReturnType)">
            <summary>
            Sets return type from cellular noise calculations
            </summary>
            <remarks>
            Default: EuclideanSq
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetCellularJitter(System.Double)">
            <summary>
            Sets the maximum distance a cellular point can move from it's grid position
            </summary>
            <remarks>
            Default: 1.0
            Note: Setting this higher than 1 will cause artifacts
            </remarks> 
        </member>
        <member name="M:FastNoiseLite.SetDomainWarpType(FastNoiseLite.DomainWarpType)">
            <summary>
            Sets the warp algorithm when using DomainWarp(...)
            </summary>
            <remarks>
            Default: OpenSimplex2
            </remarks>
        </member>
        <member name="M:FastNoiseLite.SetDomainWarpAmp(System.Double)">
            <summary>
            Sets the maximum warp distance from original position when using DomainWarp(...)
            </summary>
            <remarks>
            Default: 1.0
            </remarks>
        </member>
        <member name="M:FastNoiseLite.GetNoise(System.Double,System.Double)">
            <summary>
            2D noise at given position using current settings
            </summary>
            <returns>
            Noise output bounded between -1...1
            </returns>
        </member>
        <member name="M:FastNoiseLite.GetNoise(System.Double,System.Double,System.Double)">
            <summary>
            3D noise at given position using current settings
            </summary>
            <returns>
            Noise output bounded between -1...1
            </returns>
        </member>
        <member name="M:FastNoiseLite.DomainWarp(System.Double@,System.Double@)">
            <summary>
            2D warps the input position using current domain warp settings
            </summary>
            <example>
            Example usage with GetNoise
            <code>DomainWarp(ref x, ref y)
            noise = GetNoise(x, y)</code>
            </example>
        </member>
        <member name="M:FastNoiseLite.DomainWarp(System.Double@,System.Double@,System.Double@)">
            <summary>
            3D warps the input position using current domain warp settings
            </summary>
            <example>
            Example usage with GetNoise
            <code>DomainWarp(ref x, ref y, ref z)
            noise = GetNoise(x, y, z)</code>
            </example>
        </member>
        <member name="T:ObjectTK.Buffers.Buffer`1">
            <summary>
            Represents a buffer object.
            </summary>
            <typeparam name="T">The type of elements in the buffer object.</typeparam>
        </member>
        <member name="P:ObjectTK.Buffers.Buffer`1.Initialized">
            <summary>
            A value indicating whether the buffer has been initialized and thus has access to allocated memory.
            </summary>
        </member>
        <member name="P:ObjectTK.Buffers.Buffer`1.ElementSize">
            <summary>
            The size in bytes of one element within the buffer.
            </summary>
        </member>
        <member name="P:ObjectTK.Buffers.Buffer`1.ElementCount">
            <summary>
            The number of elements for which buffer memory was allocated.
            </summary>
        </member>
        <member name="P:ObjectTK.Buffers.Buffer`1.CurrentElementIndex">
            <summary>
            The index to the element which will be written to on the next usage of SubData().
            </summary>
        </member>
        <member name="P:ObjectTK.Buffers.Buffer`1.ActiveElementCount">
            <summary>
            The number of elements with data explicitly written.
            </summary>
        </member>
        <member name="P:ObjectTK.Buffers.Buffer`1.Content">
            <summary>
            Retrieves data back from vram.
            Mainly for debugging purposes.
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.#ctor(System.Int32)">
            <summary>
            Creates a new, uninitialized buffer object using an explicitly given element size in bytes.
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.#ctor">
            <summary>
            Creates a new, uninitialized buffer object using the element size determined by Marshal.SizeOf().
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.Init(OpenTK.Graphics.OpenGL.BufferTarget,`0[],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            Allocates buffer memory and uploads given data to it.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
            <param name="data">The data to be transfered into the buffer.</param>
            <param name="usageHint">The usage hint of the buffer object.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.Init(OpenTK.Graphics.OpenGL.BufferTarget,System.Int32,OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            Allocates buffer memory without initializing it.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
            <param name="elementCount">The number of elements to allocate memory for.</param>
            <param name="usageHint">The usage hint of the buffer object.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.Init(OpenTK.Graphics.OpenGL.BufferTarget,System.Int32,`0[],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            Allocates buffer memory and initializes it to the given data.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
            <param name="elementCount">The number of elements to allocate memory for.</param>
            <param name="data">The data to upload into the buffer.</param>
            <param name="usageHint">The usage hint of the buffer object.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.SubData(OpenTK.Graphics.OpenGL.BufferTarget,`0[])">
            <summary>
            Overwrites part of the buffer with the given data and automatically indexes forward through the available memory.
            Skips back to the beginning automatically once the end was reached.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
            <param name="data">The data to be transfered into the buffer.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.SubData(OpenTK.Graphics.OpenGL.BufferTarget,`0[],System.Int32)">
            <summary>
            Overwrites part of the buffer with the given data at the given offset.
            Writes all data available in data.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
            <param name="data">The data to be transfered into the buffer.</param>
            <param name="offset">The index to the first element of the buffer to be overwritten.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.SubData(OpenTK.Graphics.OpenGL.BufferTarget,`0[],System.Int32,System.Int32)">
            <summary>
            Overwrites part of the buffer with the given data at the given offset.
            Writes <paramref name="count" /> elements of data.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
            <param name="data">The data to be transfered into the buffer.</param>
            <param name="offset">The index to the first element of the buffer to be overwritten.</param>
            <param name="count">The number of elements from data to write.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.Clear(OpenTK.Graphics.OpenGL.BufferTarget)">
            <summary>
            Clear the buffer to default values.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.Orphan(OpenTK.Graphics.OpenGL.BufferTarget,OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            "Orphan" the buffer by calling glBufferData() with the exact same size and usage hint,
            but with a NULL pointer as the new data. This will let OpenGL allocate a new buffer
            under the same handle and continue using it without synchronization, even if the old
            buffer may still be in use by commands remaining in the queue.
            </summary>
            <param name="bufferTarget">The BufferTarget to use when binding the buffer.</param>
            <param name="usageHint">The usage hint of the buffer object.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.CopyFrom(ObjectTK.Buffers.Buffer{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies elements from the source buffer to this buffer.
            Copied on server-side only, no synchronization or transfer of data to host required.
            </summary>
            <param name="source">The source buffer to copy data from.</param>
            <param name="readOffset">Element offset into the source buffer.</param>
            <param name="writeOffset">Element offset into this buffer</param>
            <param name="count">The Number of elements to copy.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.CopyFrom(ObjectTK.Buffers.Buffer{`0})">
            <summary>
            Copies elements from the source buffer to this buffer until the end of either buffer is reached.
            </summary>
            <param name="source">The source buffer to copy elements from.</param>
        </member>
        <member name="M:ObjectTK.Buffers.Buffer`1.CheckBufferSize(OpenTK.Graphics.OpenGL.BufferTarget,System.Int32)">
            <summary>
            Checks if uploaded size matches the expected size.
            </summary>
        </member>
        <member name="T:ObjectTK.Buffers.VertexArray">
            <summary>
            Represents a vertex array object.<br/>
            TODO: add support for instanced vertex attributes with glVertexAttribDivisor (or maybe glVertexBindingDivisor)
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.#ctor">
            <summary>
            Initializes a new vertex array object.
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.Bind">
            <summary>
            Bind the vertex array.
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.DrawArrays(OpenTK.Graphics.OpenGL.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="first">Specifies the starting index in the enabled arrays.</param>
            <param name="count">Specifies the number of indices to be rendered.</param>
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.DrawElements(OpenTK.Graphics.OpenGL.PrimitiveType,System.Int32,OpenTK.Graphics.OpenGL.DrawElementsType)">
            <summary>
            Render primitives from array data using the element buffer.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">Specifies the type of the values in indices.</param>
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.BindElementBuffer``1(ObjectTK.Buffers.Buffer{``0})">
            <summary>
            Binds the given buffer to the element array buffer target.
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.UnbindElementBuffer">
            <summary>
            Unbinds any buffer bound to the element array buffer target.
            </summary>
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.BindAttribute``1(System.Int32,ObjectTK.Buffers.Buffer{``0},System.Int32,OpenTK.Graphics.OpenGL.VertexAttribPointerType,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Binds the buffer to the given vertex attribute.
            </summary>  
        </member>
        <member name="M:ObjectTK.Buffers.VertexArray.UnbindAttribute(System.Int32)">
            <summary>
            Disable the given vertex attribute.
            </summary>
        </member>
        <member name="T:ObjectTK.GLObject">
            <summary>
            Represents an OpenGL handle.<br/>
            Must be disposed explicitly, otherwise there will be a memory leak which will be logged as a warning.
            </summary>
        </member>
        <member name="F:ObjectTK.GLObject.Handle">
            <summary>
            The OpenGL handle.
            </summary>
        </member>
        <member name="M:ObjectTK.GLObject.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the GLResource class.
            </summary>
        </member>
    </members>
</doc>
