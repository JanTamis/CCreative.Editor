<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CCreative</name>
    </assembly>
    <members>
        <member name="T:CCreative.Color">
            <summary>
            Datatype for storing color values
            </summary>
        </member>
        <member name="P:CCreative.Color.B">
            <summary>
            the blue component of the color
            </summary>
        </member>
        <member name="P:CCreative.Color.G">
            <summary>
            the green component of the color
            </summary>
        </member>
        <member name="P:CCreative.Color.R">
            <summary>
            the red component of the color
            </summary>
        </member>
        <member name="P:CCreative.Color.A">
            <summary>
            the alpha component of the color
            </summary>
        </member>
        <member name="M:CCreative.Color.ToString">
            <summary>
            Returns the color as a hexadecimal string
            </summary>
            <returns> the hexadecimal string</returns>
        </member>
        <member name="P:CCreative.SkiaColor.B">
            <inheritdoc />
        </member>
        <member name="P:CCreative.SkiaColor.G">
            <inheritdoc />
        </member>
        <member name="P:CCreative.SkiaColor.R">
            <inheritdoc />
        </member>
        <member name="P:CCreative.SkiaColor.A">
            <inheritdoc />
        </member>
        <member name="M:CCreative.PApplet.Size(System.Int32,System.Int32)">
            <summary>
            Defines the dimension of the display window width and height in units of pixels
            </summary>
            <param name="width">the width of the renderer</param>
            <param name="height">the height of the renderer</param>
        </member>
        <member name="M:CCreative.PApplet.Size(System.Int32,System.Int32,CCreative.RenderTypes)">
            <summary>
            Defines the dimension of the display window width and height in units of pixels
            </summary>
            <param name="width">the width of the renderer</param>
            <param name="height">the height of the renderer</param>
            <param name="render">the renderer to use for this sketch</param>
        </member>
        <member name="M:CCreative.PApplet.Cursor(CCreative.PImage,System.Int32,System.Int32)">
            <summary>
            Sets the cursor to a predefined symbol or an image, or makes it visible if already hidden
            </summary>
            <param name="img">the image to use as cursor</param>
            <param name="x">the horizontal active spot of the cursor</param>
            <param name="y">the vertical active spot of the cursor</param>
        </member>
        <member name="M:CCreative.PApplet.Print``1(``0)">
            <summary>
            Writes data to the console (the ToString() method will be used)
            </summary>
            <param name="toPrint">data to print to console</param>
        </member>
        <member name="M:CCreative.PApplet.Println``1(``0)">
            <summary>
            Writes data to the console and adds a newline to the console (the ToString() method will be used)
            </summary>
            <param name="toPrint">data to print to console</param>
        </member>
        <member name="M:CCreative.PApplet.PrintArray(System.Collections.IEnumerable)">
            <summary>
            Writes a list of data to the console and adds a newline to the console (the ToString() method will be used)
            </summary>
            <param name="toPrint">list of data to print to console</param>
        </member>
        <member name="M:CCreative.PApplet.Title``1(``0)">
            <summary>
            Sets the title of the window
            </summary>
            <param name="newTitle">the new title of the window</param>
        </member>
        <member name="M:CCreative.PApplet.Location(System.Int32,System.Int32)">
            <summary>
            Sets the location of the window
            </summary>
            <param name="x">the horizontal location of the window</param>
            <param name="y">the vertical location of the window</param>
        </member>
        <member name="M:CCreative.PApplet.Location(CCreative.PVector)">
            <summary>
            Sets the location of the window
            </summary>
            <param name="location">the new locatio of the window</param>
        </member>
        <member name="M:CCreative.PApplet.Resizeable(System.Boolean)">
            <summary>
            Sets if the window can re resized
            </summary>
            <param name="resizeable">true if the window can re resizable or false to fix the size of the window</param>
        </member>
        <member name="M:CCreative.PApplet.Year">
            <summary>
            Returns the current year of the system
            </summary>
            <returns>the current year of the system</returns>
        </member>
        <member name="M:CCreative.PApplet.Month">
            <summary>
            Returns the current month of the system
            </summary>
            <returns>the current month of the system</returns>
        </member>
        <member name="M:CCreative.PApplet.Day">
            <summary>
            Returns the current day of the system
            </summary>
            <returns>the current day of the system</returns>
        </member>
        <member name="T:CCreative.PImage">
            <summary>
            Datatype for storing images. Images may be displayed in 2D and 3D space
            </summary>
        </member>
        <member name="P:CCreative.PImage.Pixels">
            <summary>
            The pixels of the image
            </summary>
        </member>
        <member name="P:CCreative.PImage.Width">
            <summary>
            The width of the image in units of pixels
            </summary>
        </member>
        <member name="P:CCreative.PImage.Height">
            <summary>
            The height of the image in units of pixels
            </summary>
        </member>
        <member name="P:CCreative.PImage.PixelDensity">
            <summary>
            The pixel density of the image
            </summary>
        </member>
        <member name="P:CCreative.PImage.PixelWidth">
            <summary>
            The width of the image in pixels multiplied by the density
            </summary>
        </member>
        <member name="P:CCreative.PImage.PixelHeight">
            <summary>
            The height of the image in pixels multiplied by the density
            </summary>
        </member>
        <member name="M:CCreative.PImage.LoadPixels">
            <summary>
            Loads the pixel data for the image into its <see cref="P:CCreative.PImage.Pixels"/> array
            </summary>
        </member>
        <member name="M:CCreative.PImage.UpdatePixels(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the image with the data in its <see cref="P:CCreative.PImage.Pixels"/> array
            </summary>
            <param name="x">x-coordinate of the upper-left corner</param>
            <param name="y">y-coordinate of the upper-left corner</param>
            <param name="w">the width</param>
            <param name="h">the height</param>
        </member>
        <member name="M:CCreative.PImage.UpdatePixels">
            <summary>
            Updates the image with the data in its <see cref="P:CCreative.PImage.Pixels"/> array
            </summary>
        </member>
        <member name="M:CCreative.PImage.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the image to a new width and height
            </summary>
            <param name="width">the resized image width</param>
            <param name="height">the resized image height</param>
        </member>
        <member name="M:CCreative.PImage.Get(System.Int32,System.Int32)">
            <summary>
            Reads the color of any pixel
            </summary>
            <param name="x">x-coordinate of the pixel</param>
            <param name="y">y-coordinate of the pixel</param>
            <returns>the pixel at the coordinates</returns>
        </member>
        <member name="M:CCreative.PImage.Get(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads a block of pixels
            </summary>
            <param name="x">x-coordinate of the upper-left corner</param>
            <param name="y">y-coordinate of the upper-left corner</param>
            <param name="w">the width of the block</param>
            <param name="h">the height of the block</param>
            <returns>the block of pixels</returns>
        </member>
        <member name="M:CCreative.PImage.Get">
            <summary>
            Gets a copy of the image
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.PImage.Copy">
            <summary>
            Copies the entire image
            </summary>
            <returns>the copied image</returns>
        </member>
        <member name="M:CCreative.PImage.Set(System.Int32,System.Int32,CCreative.Color)">
            <summary>
            Writes a color to any pixel
            </summary>
            <param name="x">x-coordinate of the pixel</param>
            <param name="y">y-coordinate of the pixel</param>
            <param name="color">the color to set to the location</param>
        </member>
        <member name="M:CCreative.PImage.Set(System.Int32,System.Int32,CCreative.PImage)">
            <summary>
            Writes a block of pixels
            </summary>
            <param name="x">x-coordinate of the upper-left corner</param>
            <param name="y">y-coordinate of the upper-left corner</param>
            <param name="img">image to copy into the original image</param>
        </member>
        <member name="M:CCreative.PImage.Mask(CCreative.Color[])">
            <summary>
            Masks part of an image with pixels as an alpha channel
            </summary>
            <param name="maskArray">pixels to use as the mask</param>
        </member>
        <member name="M:CCreative.PImage.Mask(CCreative.PImage)">
            <summary>
            Masks part of an image from displaying by loading another image and using it as an alpha channel
            </summary>
            <param name="img">image to use as the mask</param>
        </member>
        <member name="M:CCreative.Math.Ceil``1(``0)">
            <summary>
            Calculates the closest int value that is greater than or equal to the value of the parameter
            </summary>
            <param name="number">number to round up</param>
            <returns>the result of the calculation</returns>
        </member>
        <member name="M:CCreative.Math.Constrain``1(``0,``0,``0)">
            <summary>
            Constrains a value to not exceed a minimum and maximum value
            </summary>
            <param name="value">the value to constrain</param>
            <param name="low">minimum limit</param>
            <param name="high">maximum limit</param>
            <returns>the constraint value</returns>
        </member>
        <member name="M:CCreative.Math.Dist(CCreative.PVector,CCreative.PVector)">
            <summary>
            Calculates the distance between two PVectors
            </summary>
            <param name="beginPoint">the first PVector</param>
            <param name="endPoint">the second PVector</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Dist(CCreative.PVector[])">
            <summary>
            Calculate the distance between the given points
            </summary>
            <param name="points">the points to calculate the distance with</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Dist``1(``0,``0,``0,``0)">
            <summary>
            Calculate the distance between the given points
            </summary>
            <param name="beginX">x-coordinate of the first point</param>
            <param name="beginY">y-coordinate of the first point</param>
            <param name="endX">x-coordinate of the second point</param>
            <param name="endY">y-coordinate of the second point</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Dist``1(``0,``0,``0,``0,``0,``0)">
            <summary>
            Calculate the distance between the given points
            </summary>
            <param name="beginX">x-coordinate of the first point</param>
            <param name="beginY">y-coordinate of the first point</param>
            <param name="beginZ">z-coordinate of the first point</param>
            <param name="endX">x-coordinate of the second point</param>
            <param name="endY">y-coordinate of the second point</param>
            <param name="endZ">z-coordinate of the second point</param>
            <returns>the distance between the points</returns>
        </member>
        <member name="M:CCreative.Math.Floor``1(``0)">
            <summary>
            Calculates the closest int value that is less than or equal to the value of the parameter
            </summary>
            <param name="number">number to round down</param>
            <returns>the result of the calculation</returns>
        </member>
        <member name="M:CCreative.Math.Lerp``1(``0,``0,``0)">
            <summary>
            Calculates a number between two numbers at a specific increment
            </summary>
            <param name="start">first value</param>
            <param name="stop">second value</param>
            <param name="atm">number between 0.0 and 1.0</param>
            <returns>the result of the calculation</returns>
        </member>
        <member name="M:CCreative.Math.Sqrt``1(``0)">
            <summary>
            Calculates the square root of the specified number
            </summary>
            <typeparam name="T">the type of the floating point number</typeparam>
            <param name="number">the specified number</param>
            <returns>the square root of <paramref name="number"/></returns>
        </member>
        <member name="M:CCreative.Math.Pow``1(``0,``0)">
            <summary>
            Calculates the power of <paramref name="base"/> raised to <paramref name="exponent"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="base"></param>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.Mag``1(``0,``0)">
            <summary>
            Calculates the magnitude (or length) of a vector
            </summary>
            <param name="numberX">x-axis of the vector</param>
            <param name="numberY">y-axis of the vector</param>
            <returns>the magnitude (or length) of the vector</returns>
        </member>
        <member name="M:CCreative.Math.Map``1(``0,``0,``0,``0,``0)">
            <summary>
            Re-maps a number from one range to another
            </summary>
            <param name="value">the incoming value to be converted</param>
            <param name="start1">lower bound of the value's current range</param>
            <param name="stop1">upper bound of the value's current range</param>
            <param name="start2">lower bound of the value's target range</param>
            <param name="stop2">upper bound of the value's target range</param>
            <returns>the remapped number</returns>
        </member>
        <member name="M:CCreative.Math.Norm``1(``0,``0,``0)">
            <summary>
            Normalizes a number from another range into a value between 0 and 1
            </summary>
            <param name="value">the incoming value to be converted</param>
            <param name="start">lower bound of the value's current range</param>
            <param name="stop">upper bound of the value's current range</param>
            <returns>the normalized value</returns>
        </member>
        <member name="M:CCreative.Math.Round``1(``0)">
            <summary>
            Calculates the integer closest to the given number
            </summary>
            <param name="number">number to round</param>
            <returns>returns the rounded number</returns>
        </member>
        <member name="M:CCreative.Math.Sq``1(``0)">
            <summary>
            Squares a number (multiplies a number by itself)
            </summary>
            <param name="number">number to square</param>
            <returns>returns the squared number</returns>
        </member>
        <member name="M:CCreative.Math.InverseSqrt``1(``0)">
            <summary>
            Calculates 1 / sqrt(x) of the given number
            </summary>
            <param name="x">the number to calculate the inverse square root of</param>
            <returns>1 / sqrt(x)</returns>
        </member>
        <member name="M:CCreative.Math.Noise(System.Single)">
            <summary>
            Returns the Perlin noise value at specified coordinates
            </summary>
            <remarks>
            Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard <see cref="M:CCreative.Math.Random(System.Single,System.Single)"/> function
            </remarks>
            <param name="x">x-coordinate in noise space</param>
            <returns>the Perlin noise value at the specified coordinates</returns>
        </member>
        <member name="M:CCreative.Math.Noise(System.Single,System.Single)">
            <summary>
            Returns the Perlin noise value at specified coordinates
            </summary>
            <remarks>
            Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard <see cref="M:CCreative.Math.Random(System.Single,System.Single)"/> function
            </remarks>
            <param name="x">x-coordinate in noise space</param>
            <param name="y">y-coordinate in noise space</param>
            <returns>the Perlin noise value at the specified coordinates</returns>
        </member>
        <member name="M:CCreative.Math.Noise(System.Single,System.Single,System.Single)">
            <summary>
            Returns the Perlin noise value at specified coordinates
            </summary>
            <remarks>
            Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard <see cref="M:CCreative.Math.Random(System.Single,System.Single)"/> function
            </remarks>
            <param name="x">x-coordinate in noise space</param>
            <param name="y">y-coordinate in noise space</param>
            <param name="z">z-coordinate in noise space</param>
            <returns>the Perlin noise value at the specified coordinates</returns>
        </member>
        <member name="M:CCreative.Math.NoiseSeed(System.Int32)">
            <summary>
            Sets the seed value for <see cref="M:CCreative.Math.Noise(System.Single)"/>, <see cref="M:CCreative.Math.Noise(System.Single,System.Single)"/> and <see cref="M:CCreative.Math.Noise(System.Single,System.Single,System.Single)"/>
            </summary>
            <remarks>
            By default, noise() produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run
            </remarks>
            <param name="seed">seed value</param>
        </member>
        <member name="M:CCreative.Math.NoiseDetail(System.Int32)">
             <summary>
             Adjusts the character and level of detail produced by the Perlin noise function
             </summary>
             <remarks>
             Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overall intensity of the noise, whereas higher octaves create finer-grained details in the noise sequence.
            
             By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the first octave.This falloff amount can be changed by adding an additional function parameter.For example, a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave.While any number between 0.0 and 1.0 is valid, note that values greater than 0.5 may result in noise() returning values greater than 1.0
             </remarks>
             <param name="lod">number of octaves to be used by the noise</param>
        </member>
        <member name="M:CCreative.Math.NoiseDetail(System.Int32,System.Single)">
             <summary>
             Adjusts the character and level of detail produced by the Perlin noise function
             </summary>
             <remarks>
             Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overall intensity of the noise, whereas higher octaves create finer-grained details in the noise sequence.
            
             By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the first octave.This falloff amount can be changed by adding an additional function parameter.For example, a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave.While any number between 0.0 and 1.0 is valid, note that values greater than 0.5 may result in noise() returning values greater than 1.0
             </remarks>
             <param name="lod">number of octaves to be used by the noise</param>
             <param name="falloff">falloff factor for each octave</param>
        </member>
        <member name="M:CCreative.Math.Degrees``1(``0)">
            <summary> Converts degrees to radians. </summary>
            <param name="radians"> The radians to convert. </param>
            <returns>degrees</returns>
        </member>
        <member name="M:CCreative.Math.Radians``1(``0)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="degrees">the radians</param>
            <returns>radians</returns>
        </member>
        <member name="M:CCreative.Math.RandomString(System.Int32)">
            <summary>
            Returns a random string with a given length</summary>
            <param name="length">the length</param>
            <returns>a random string</returns>
        </member>
        <member name="M:CCreative.Math.Random(System.Single,System.Single)">
            <summary>
            Return a random float floating point number between the given range
            </summary>
            <param name="low">the lower bound (inclusive)</param>
            <param name="high">the upper bound (exclusive)</param>
            <returns>a random number</returns>
        </member>
        <member name="M:CCreative.Math.Random(System.Single)">
            <summary>
            Return a random float floating point number
            </summary>
            <param name="high">the upper bound (exclusive)</param>
            <returns>a random number</returns>
        </member>
        <member name="M:CCreative.Math.Random">
            <summary>
            Return a random float floating point number between 0 and 1
            </summary>
            <returns>a random float-point number between 0 and 1</returns>
        </member>
        <member name="M:CCreative.Math.RandomSeed(System.Int32)">
            <summary>
            Sets the seed value for random()
            </summary>
            <remarks>
            By default, random() produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run
            </remarks>
            <param name="seed"></param>
        </member>
        <member name="M:CCreative.Math.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random item from the list
            </summary>
            <param name="list">the array to pick a random item from</param>
            <returns>a rando item from the list</returns>
        </member>
        <member name="M:CCreative.Math.Random``1(System.Collections.Generic.IList{``0})">
            <summary> Returns a random item form the array. </summary>
            <param name="array"> The array to fick a random item from.</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.RandomInt(System.Int32,System.Int32)">
            <summary> Return a random int number. </summary>
            <param name="lowerBound"> The lower bound (inclusive). </param>
            <param name="upperBound"> The upper bound (exclusive). </param>
            <returns> A random int between the given range. </returns>
        </member>
        <member name="M:CCreative.Math.RandomInt(System.Int32)">
            <summary> Return a random int number. </summary>
            <param name="upperBound">  the upper bound (exclusive). </param>
            <returns> System.Single. </returns>
        </member>
        <member name="M:CCreative.Math.RandomInt">
            <summary> Return a random int number between 0 and <see cref="F:System.Int32.MaxValue"/> (exclusive)</summary>
            
            <returns> System.Single. </returns>
        </member>
        <member name="M:CCreative.Math.RandomByte">
            <summary> Return a random byte number. </summary>
            <returns> System.Single. </returns>
        </member>
        <member name="M:CCreative.Math.RandomBytes(System.Byte[])">
            <summary>
            Fills the provided byte array with random bytes.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:CCreative.Math.RandomGaussian(System.Single,System.Single)">
            <summary> Returns a random number fitting a Gaussian, or normal, distribution. There is theoretically no minimum or maximum value that randomGaussian() might return.  </summary>
            <param name="mean"> The mean. </param>
            <param name="sd"> The standard deviation. </param>
            <returns> A float. </returns>
        </member>
        <member name="M:CCreative.Math.RandomGaussian">
            <summary> Returns a random number fitting a Gaussian, or normal, distribution. There is theoretically no minimum or maximum value that randomGaussian() might return. </summary>
            <returns> A Gaussian of mean 0 and deviation of 1. </returns>
        </member>
        <member name="M:CCreative.Math.RandomBoolean">
            <summary> Returns a true or false the chance is 50-50. </summary>
            <returns> The result. </returns>
        </member>
        <member name="M:CCreative.Math.RandomColor">
            <summary>
            Returns a random color with the alpha channel set to <see cref="F:System.Byte.MaxValue"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CCreative.Math.RandomLong(System.Int64,System.Int64)">
            <summary>
            Calculate a random long between <paramref name="min"/> and <paramref name="max"/>
            </summary>
            <param name="min">the minimum value of the bounds</param>
            <param name="max"> the maximum value of the bounds</param>
            <returns>a random long between <paramref name="min"/> and <paramref name="max"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomLong(System.Int64)">
            <summary>
            Calculate a random long between 0 and <paramref name="max"/>
            </summary>
            <param name="max"> the maximum value of the bounds</param>
            <returns>a random long between 0 and <paramref name="max"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomLong">
            <summary>
            Calculate a random long between <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>
            </summary>
            <returns>a random long between <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomDecimal(System.Decimal,System.Decimal)">
            <summary>
            Calculate a random decimal between <paramref name="minValue"/> and <paramref name="maxValue"/>
            </summary>
            <param name="minValue">the minimum value of the bounds</param>
            <param name="maxValue">the maximum value of the bounds</param>
            <returns>a random decimal between <paramref name="minValue"/> and <paramref name="maxValue"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomDecimal(System.Decimal)">
            <summary>
            Calculate a random decimal between <see cref="F:System.Decimal.Zero"/> and <paramref name="maxValue"/>		
            </summary>
            <param name="maxValue">the maximum value of the bounds</param>
            <returns>a random decimal between <see cref="F:System.Decimal.Zero"/> and <paramref name="maxValue"/></returns>
        </member>
        <member name="M:CCreative.Math.RandomDecimal">
            <summary>
            Calculate a random decimal between <see cref="F:System.Decimal.Zero"/> and <see cref="F:System.Decimal.One"/>
            </summary>
            <returns>a random decimal between <see cref="F:System.Decimal.Zero"/> and <see cref="F:System.Decimal.One"/> </returns>
        </member>
        <member name="M:CCreative.Math.Sign``1(``0)">
            <summary> returns the sign of a number, indicating whether the number is positive, negative or zero </summary>
            <param name="number"> The number to check. </param>
            <returns> -1 if lower than 0, 0 if equal to 0 and 1 if higher that 0. </returns>
        </member>
        <member name="M:CCreative.Math.Fibonacci``1(``0)">
            <summary> Returns the fibonacci of the given number. </summary>
            <param name="number"> The number. </param>
            <returns> A float. </returns>
        </member>
        <member name="M:CCreative.Math.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the given list and returns a copy which can be iterated over
            </summary>
            <param name="list">the items ot shuffle</param>
            <returns>a shuffled copy of the list</returns>
        </member>
        <member name="M:CCreative.Math.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Search for a value in a sorted list
            </summary>
            <param name="values">the sorted list to search though</param>
            <param name="value">the value to search for</param>
            <returns>the index of <paramref name="value"/></returns>
        </member>
        <member name="M:CCreative.Math.Binary(System.Int64)">
            <summary> Converts an int, byte, or a long to a String containing the equivalent binary notation </summary>
            <param name="value"> Value to convert </param>
            <returns> Returns the binary string </returns>
        </member>
        <member name="M:CCreative.Math.Binary(System.Char)">
            <summary> Converts an char to a String containing the equivalent binary notation </summary>
            <param name="value"> Value to convert </param>
            <returns> Returns the binary string </returns>
        </member>
        <member name="M:CCreative.Math.Binary(CCreative.Color)">
            <summary> Converts an char to a String containing the equivalent binary notation </summary>
            <param name="value"> Value to convert </param>
            <returns> Returns the binary string </returns>
        </member>
        <member name="M:CCreative.Math.Unbinary(System.String)">
            <summary> Converts a String representation of a binary number to its equivalent integer value </summary>
            <param name="value"> String to convert to an integer </param>
            <returns> Returns the result of the conversion </returns>
        </member>
        <member name="M:CCreative.Math.Hex``1(``0)">
            <summary> Converts an int or a byte to a String containing the equivalent hexadecimal notation </summary>
            <param name="value"> The value to convert to a hex value </param>
            <returns> Returns the hex value </returns>
        </member>
        <member name="M:CCreative.Math.Hex(System.Char)">
            <summary> Converts an char to a String containing the equivalent hexadecimal notation </summary>
            <param name="value"> The value to convert to a hex value </param>
            <returns> Returns the hex value </returns>
        </member>
        <member name="M:CCreative.Math.Hex(CCreative.Color)">
            <summary> Converts an int or a byte to a String containing the equivalent hexadecimal notation </summary>
            <param name="value"> The value to convert to a hex value </param>
            <returns> Returns the hex value </returns>
        </member>
        <member name="M:CCreative.Math.Unhex(System.String)">
            <summary> Converts a String representation of a hexadecimal number to its equivalent integer value </summary>
            <param name="value"> String to convert to an integer </param>
            <returns> Returns a integer from a hexadecimal number </returns>
        </member>
        <member name="M:CCreative.Math.Str``1(``0)">
            <summary>
            Converts the given value to a string, returns <see cref="F:System.String.Empty"/> if the value is null
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Int``1(``0)">
            <summary>
            Converts a value to a <see cref="T:System.Int32"/>
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Char``1(``0)">
            <summary>
            Converts a value to a <see cref="T:System.Char"/>
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Boolean``1(``0)">
            <summary>
            Converts a value to a <see cref="T:System.Boolean"/>
            </summary>
            <param name="value">the value to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Float``1(``0)">
            <summary>
            Converts the given value to a float
            </summary>
            <param name="value">the value to convert to a float</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:CCreative.Math.Convert``2(``1)">
            <summary> Converts a value to a different type </summary>
            <param name="value"> The value to convert </param>
            
            <returns> Returns the converted value </returns>
        </member>
        <member name="M:CCreative.Math.Min``1(System.Span{``0})">
            <summary>
            Determines the smallest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the minimum value</returns>
        </member>
        <member name="M:CCreative.Math.Max``1(System.Span{``0})">
            <summary>
            Determines the biggest value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the maximum value</returns>
        </member>
        <member name="M:CCreative.Math.Sum``1(System.Span{``0})">
            <summary>
            Determines the sum of a sequence of numbers
            </summary>
            <param name="numbers">array of get the sum of</param>
            <returns>returns the sum</returns>
        </member>
        <member name="M:CCreative.Math.Average``1(System.Span{``0})">
            <summary>
            Determines the average value in a sequence of numbers
            </summary>
            <param name="numbers">array of numbers to compare</param>
            <returns>returns the average value</returns>
        </member>
        <member name="M:CCreative.NoiseMaker.Noise1(System.Single)">
            1D float Perlin noise, SL "noise()"
        </member>
        <member name="M:CCreative.NoiseMaker.Pnoise1(System.Single,System.Int32)">
            1D float Perlin periodic noise, SL "pnoise()"
        </member>
        <member name="M:CCreative.NoiseMaker.Noise2(System.Single,System.Single)">
            2D float Perlin noise.
        </member>
        <member name="M:CCreative.NoiseMaker.Pnoise2(System.Single,System.Single,System.Int32,System.Int32)">
            2D float Perlin periodic noise.
        </member>
        <member name="M:CCreative.NoiseMaker.Noise3(System.Single,System.Single,System.Single)">
            3D float Perlin noise.
        </member>
        <member name="M:CCreative.NoiseMaker.Pnoise3(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            3D float Perlin periodic noise.
        </member>
        <member name="M:CCreative.NoiseMaker.Noise4(System.Single,System.Single,System.Single,System.Single)">
            4D float Perlin noise.
        </member>
        <member name="M:CCreative.NoiseMaker.Pnoise4(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            4D float Perlin periodic noise.
        </member>
        <member name="P:CCreative.PConstants.MouseX">
            <summary>
            The horizontal location of the mouse on the window
            </summary>
        </member>
        <member name="P:CCreative.PConstants.MouseY">
            <summary>
            The vertical location of the mouse on the window
            </summary>
        </member>
        <member name="P:CCreative.PConstants.MousePos">
            <summary>
            The current location of the mouse on the window
            </summary>
        </member>
        <member name="P:CCreative.PConstants.PmouseX">
            <summary>
            The vertical location of the mouse on the window on the previous frame
            </summary>
        </member>
        <member name="P:CCreative.PConstants.PmouseY">
            <summary>
            The horizontal location of the mouse on the window on the previous frame
            </summary>
        </member>
        <member name="T:CCreative.Rendering.PGraphics">
            <summary>
            Main graphics and rendering context
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(CCreative.Color)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <remarks>
            The default background is light gray. This function is typically used within draw() to clear the display window at the beginning of each frame, but it can be used inside setup() to set the background on the first frame of animation or if the backgound need only be set once.
            </remarks>
            <param name="color">the background color</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(CCreative.PImage)">
            <summary>
            Sets the background of the window to a image and erases all drawings on the screen
            </summary>
            <param name="image">PImage to set as background</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Single)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Single,System.Single)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <param name="alpha">the opacity of the background</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Single,System.Single,System.Single)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="v1">the red or hue value of the background</param>
            <param name="v2">the green of saturation value of the background</param>
            <param name="v3">the red or brightness value of the background</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Background(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the background of the window and erases all drawings on the screen
            </summary>
            <param name="v1">the red or hue value of the background</param>
            <param name="v2">the green of saturation value of the background</param>
            <param name="v3">the red or brightness value of the background</param>
            <param name="alpha">the opacity of the background</param>
            <returns>the window background color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Single)">
            <summary>
            Changes the way CCreative interprets color data
            </summary>
            <param name="mode">Either <see cref="F:CCreative.PConstants.RGB"/> or <see cref="F:CCreative.PConstants.RGB"/>, corresponding to Red/Green/Blue and Hue/Saturation/Brightness</param>
            <param name="max">range for all color elements</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Single,System.Single,System.Single)">
            <summary>
            Changes the way CCreative interprets color data
            </summary>
            <param name="mode">Either <see cref="F:CCreative.PConstants.RGB"/> or <see cref="F:CCreative.PConstants.RGB"/>, corresponding to Red/Green/Blue and Hue/Saturation/Brightness</param>
            <param name="max1">range for the red or hue depending on the current color mode</param>
            <param name="max2">range for the green or saturation depending on the current color mode</param>
            <param name="max3">range for the blue or brightness depending on the current color mode</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Changes the way CCreative interprets color data
            </summary>
            <param name="mode">Either <see cref="F:CCreative.PConstants.RGB"/> or <see cref="F:CCreative.PConstants.RGB"/>, corresponding to Red/Green/Blue and Hue/Saturation/Brightness</param>
            <param name="max1">range for the red or hue depending on the current color mode</param>
            <param name="max2">range for the green or saturation depending on the current color mode</param>
            <param name="max3">range for the blue or brightness depending on the current color mode</param>
            <param name="maxA">range for the alpha</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Single)">
            <summary>
            Creates a grayscale color
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <returns>the created color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(CCreative.Color,System.Single)">
            <summary>
            Creates a new color based on <paramref name="color"/> with a given transparency
            </summary>
            <param name="color">the base color to change the alpha value of</param>
            <param name="alpha">the opacity of the color</param>
            <returns>a new color based from <paramref name="color"/> with the given alpha</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Single,System.Single)">
            <summary>
            Creates a grayscale color with a given transparency
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <param name="alpha">the opacity of the color</param>
            <returns>a new grayscale color with the given alpha</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from RGB values or HSB value based on the given colormode, use <see cref="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Single)"/> to change the colormode
            </summary>
            <param name="v1">the red or hue value of the color</param>
            <param name="v2">the green of saturation value of the color</param>
            <param name="v3">the red or brightness value of the color</param>
            <returns>the created color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Color(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from RGB values or HSB value based on the given colormode, use <see cref="M:CCreative.Rendering.PGraphics.ColorMode(CCreative.ColorModes,System.Single)"/> to change the colormode
            </summary>
            <param name="v1">the red or hue value of the color</param>
            <param name="v2">the green of saturation value of the color</param>
            <param name="v3">the red or brightness value of the color</param>
            <param name="a">the opacity of the color</param>
            <returns>the created color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Alpha(CCreative.Color)">
            <summary>
            Returns the alpha (transparency) value of the color
            </summary>
            <param name="color">the color to get the alpha (transparency) value of</param>
            <returns>the opacity value of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Red(CCreative.Color)">
            <summary>
            Returns the red component of the color
            </summary>
            <param name="color">the color to get the red component of</param>
            <returns>the red component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Green(CCreative.Color)">
            <summary>
            Returns the green component of the color
            </summary>
            <param name="color">the color to get the green component of</param>
            <returns>the green component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Blue(CCreative.Color)">
            <summary>
            Returns the blue value of the color
            </summary>
            <param name="color">the color to get the blue value of</param>
            <returns>the blue value of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Hue(CCreative.Color)">
            <summary>
            Returns the hue component of the color
            </summary>
            <param name="color">the color to get the hue component of</param>
            <returns>the hue component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Saturation(CCreative.Color)">
            <summary>
            Returns the saturation component of the color
            </summary>
            <param name="color">the color to get the saturation component of</param>
            <returns>the saturation component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Brightness(CCreative.Color)">
            <summary>
            Returns the brightness component of the color
            </summary>
            <param name="color">the color to get the brightness component of</param>
            <returns>the brightness component of the color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ContrastColor(CCreative.Color)">
            <summary>
            Gets the contrast color (black or white) of the given color
            </summary>
            <param name="color">the color to calculate the contrast color of</param>
            <returns>the contrast color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.LerpColor(CCreative.Color,CCreative.Color,System.Single)">
            <summary>
            Calculates a color between two colors at a specific increment
            </summary>
            <param name="c1">the first color</param>
            <param name="c2">the second color</param>
            <param name="amt">the specified increment between 0 and 1</param>
            <returns>the interpolated color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.NoStroke">
            <summary>
            Disables drawing the stroke (outline)
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(CCreative.Color)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="color">the color to use</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Single)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Single,System.Single)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <param name="alpha">the alpha (transparent) component of the new stroke color</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Single,System.Single,System.Single)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="v1">the red or hue value of the new stroke color</param>
            <param name="v2">the green of saturation value of the new stroke color</param>
            <param name="v3">the red or brightness value of the new stroke color</param>
            <returns>the new stroke color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Stroke(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color used to draw lines and borders around shapes
            </summary>
            <param name="v1">the red or hue value of the new stroke color</param>
            <param name="v2">the green of saturation value of the new stroke color</param>
            <param name="v3">the red or brightness value of the new color</param>
            <param name="alpha">the alpha (transparency) of the new stroke color</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.NoFill">
            <summary>
            Disables filling geometry
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(CCreative.Color)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="color">the new stroke </param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Single)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Single,System.Single)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="gray">number specifying value between white and black</param>
            <param name="alpha">the opacity of the color</param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Single,System.Single,System.Single)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="v1">the red or hue value of the fill color</param>
            <param name="v2">the green of saturation value of the fill color</param>
            <param name="v3">the red or brightness value of the fill color</param>
            <returns>the new fill color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Fill(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color used to fill shapes
            </summary>
            <param name="v1">the red or hue value of the fill color</param>
            <param name="v2">the green of saturation value of the fill color</param>
            <param name="v3">the red or brightness value of the fill color</param>
            <param name="alpha">the opacity of the fill color</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.NoTint">
            <summary>
            Removes the current fill value for displaying images and reverts to displaying images with their original hues
            </summary>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(CCreative.Color)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="color">the new tint color</param>
            <returns>the new tint color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Single)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <returns>the new tint color</returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Single,System.Single)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="gray">specifies a value between white and black</param>
            <param name="alpha">the opacity of the images</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Single,System.Single,System.Single)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="v1">the red or hue value of the tint color</param>
            <param name="v2">the green of saturation value of the tint color</param>
            <param name="v3">the red or brightness value of the tint color</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Tint(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the fill value for displaying images
            </summary>
            <param name="v1">the red or hue value of the tint color</param>
            <param name="v2">the green of saturation value of the tint color</param>
            <param name="v3">the red or brightness value of the tint color</param>
            <param name="alpha">the opacity of the images</param>
            <returns></returns>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Ambient(CCreative.Color)">
            <summary>
            Sets the ambient reflectance for shapes drawn to the screen
            </summary>
            <param name="color">the reflectance color</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Ambient(System.Single)">
            <summary>
            Sets the ambient reflectance for shapes drawn to the screen
            </summary>
            <param name="gray">number specifying value between white and black</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Ambient(System.Single,System.Single,System.Single)">
            <summary>
            Sets the ambient reflectance for shapes drawn to the screen
            </summary>
            <param name="v1">the red or hue value of the ambient reflectance color</param>
            <param name="v2">the green of saturation value of the ambient reflectance color</param>
            <param name="v3">the red or brightness value of the ambient reflectance color</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.AmbientLight(CCreative.Color)">
            <summary>
            Adds an ambient light
            </summary>
            <param name="color">the color of the ambient light</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.AmbientLight(System.Single,System.Single,System.Single)">
            <summary>
            Adds an ambient light
            </summary>
            <remarks>
            Ambient light doesn't come from a specific direction, the rays of light have bounced around so much that objects are evenly lit from all sides
            </remarks>
            <param name="v1">the red or hue value of the ambient color</param>
            <param name="v2">the green of saturation value of the ambient color</param>
            <param name="v3">the red or brightness value of the ambient color</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Multiplies the current matrix by the one specified through the parameters
            </summary>
            <param name="n00">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n01">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n02">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n10">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n11">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n12">numbers which define the 4x4 matrix to be multiplied</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Multiplies the current matrix by the one specified through the parameters
            </summary>
            <param name="n00">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n01">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n02">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n03">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n10">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n11">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n12">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n13">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n20">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n21">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n22">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n23">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n30">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n31">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n32">numbers which define the 4x4 matrix to be multiplied</param>
            <param name="n33">numbers which define the 4x4 matrix to be multiplied</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.ApplyMatrix(CCreative.PMatrix)">
            <summary>
            Multiplies the current matrix by the one specified through the parameter
            </summary>
            <param name="matrix">the matrix to multiply the current with</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.Arc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc to the screen
            </summary>
            <param name="a">x-coordinate of the arc's ellipse</param>
            <param name="b">y-coordinate of the arc's ellipse</param>
            <param name="c">width of the arc's ellipse by default</param>
            <param name="d">height of the arc's ellipse by default</param>
            <param name="start">angle to start the arc, specified in radians</param>
            <param name="stop">angle to stop the arc, specified in radians</param>
        </member>
        <member name="M:CCreative.Rendering.PGraphics.BeginCamera">
            <summary>
            The beginCamera() and endCamera() functions enable advanced customization of the camera space
            </summary>
        </member>
    </members>
</doc>
